<?xml version="1.0" encoding="UTF-8" ?>
<?oxygen SCHSchema="http://openurc.org/ns/uisocketdesc-2"?>
<uiSocket about="http://openurc.org/TPL/tv-set-1.0/tv-set-basic.uis" 
	id="socket"
	sufficient="false"
	complete="false"
	xmlns="http://openurc.org/ns/uisocketdesc-2"  
	xmlns:uis="http://openurc.org/ns/uisocketdesc-2"	
	xmlns:dc="http://purl.org/dc/elements/1.1/" 
	xmlns:dcterms="http://purl.org/dc/terms/"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://openurc.org/ns/uisocketdesc-2 http://openurc.org/ns/uisocketdesc-2 
		http://purl.org/dc/elements/1.1/ http://dublincore.org/schemas/xmls/qdc/2006/01/06/dc.xsd
		http://purl.org/dc/terms/ http://dublincore.org/schemas/xmls/qdc/2006/01/06/dcterms.xsd">
	
	<dc:description xml:lang="en">UI socket for the TV set basic functionalities.</dc:description>
	<dc:creator>Gorka Epelde, Vicomtech-ik4</dc:creator>
	<dc:contributor>Eduardo Carrasco, Vicomtech-ik4</dc:contributor>
	<dc:contributor>Gottfried Zimmermann, Access Technologies Group</dc:contributor>
	<dc:publisher>OpenURC Alliance</dc:publisher>
	<dcterms:conformsTo>http://openurc.org/ns/uisocketdesc-2/isoiec24752-2-2013</dcterms:conformsTo>
	<dcterms:modified>2016-01-15</dcterms:modified>
	<dc:rights>Copyright 2015 openURC Alliance. Licensed under CC-BY 4.0, see https://creativecommons.org/licenses/by/4.0/.</dc:rights>
	<variable id="powerMode" type="powerModeType">
		<dc:description xml:lang="en">
			- 'ON' corresponds to an activated TV.
			- 'OFF' corresponds to a deactivated TV. e.g through an additional power socket control. If a model does not support the 'OFF' state, it should reject that value.
			- 'STANDBY' corresponds to a deactivated TV that may still be awaken from the network.
		</dc:description>
	</variable>
	
	<command id="switchPower" type="uis:basicCommand" optional="true">
		<dc:description xml:lang="en">
			Toggle power ON/STANDBY/OFF.  Depending on the TV set it can be used with argument ON / OFF / STANDBY directly or actioned using argument TOOGLE (which would go ON=>STANDBY=>OFF and back).
		</dc:description>
		<param id="switchTo" type="switchToType" dir="in"/>
	</command>
	
	<set id="volumeControls">
		<dc:description xml:lang="en">This set contains volume related elements.  These are common across different groups of functionalities.</dc:description>
		<variable id="volume" type="volumeType">
			<dc:description xml:lang="en">
				Volume of the TV audio output may be set in range 0 to 50 (inclusive bounds), stepsize 1.  This variable is intended to be used to specify directly the value of volume.
				When the volume is changed, the mute is deactivated (if it was activated).
			</dc:description>
		</variable>
		<variable id="mute" type="xsd:boolean">
			<dc:description xml:lang="en">
				Activates and deactivates muted volume.
				
				This is a variable and not a command, since the mute state has to be available for usage
				within dependency expressions of other variables and commands.
			</dc:description>
		</variable>
	</set>
	<set id="liveTVControls">
		<variable id="activeChannel" type="channelType">
			<dc:description xml:lang="en">
				This variable may be used to set the active channel shown by the TV.  If tv is "stopped"
				or "paused" and the user sets a new channel, it will be played automatically.

				The string id for a channel shall be the same as in the EPG socket to
				provide a direct manner of interoperability between the TV tuner and EPG socket.
				It derives from uis:stringListItem and thus must not contain whitespace.
				The string id may be used to fetch long labels and icons from a resource sheet.
			</dc:description>
			<dependency>				
				<write>(value('tvIsRecording') eq 'false')</write>
			</dependency>
			<selection closed="true">
				<selectionSetDynamic id="currentChannels" varRef="channelList"/>
			</selection>
		</variable>
		<variable id="channelList" type="channelListType" final="true">
			<dc:description xml:lang="en">

				This variable holds a space-separated list of ids of channel that the user may select as active channel.

				The UI may also show numbers to the users, using an index into this list.
				The variable is marked as final, since the channel list may not be modified at runtime.
				!! FUTURE =>The channelList has to be polled to the MCE, so if the user tunes new channels or loses previous ones, the channel list is uploaded.
				Example: "ARD ZDF SAT-1 ARTE"

			</dc:description>
			<dependency>
			 	<relevant>true()</relevant>
				<write>false()</write>
			</dependency>
		</variable>
	</set>
	<set id="timeShiftControls">
		<variable id="tvStatus" type="statusType" optional="true">
			<dc:description xml:lang="en">
				Indicates the status of the TV ("stopped", "playing", "paused").
			</dc:description>
			<dependency>
				<relevant>true()</relevant>
				<write> false() </write>
			</dependency>
		</variable>
		<command id="playTV" type="uis:basicCommand" optional="true">
			<dc:description xml:lang="en">
				This command plays the selected channel ("activeChannel"). In case its not set, the first channel of the mce tunning would be set.
			</dc:description>
			<dependency>				
				<write>(value('tvIsRecording') eq 'false')</write>
			</dependency>		
		</command>
		<command id="stopTV" type="uis:basicCommand" optional="true">
			<dc:description xml:lang="en">
				This command stops playing the selected channel. If stopTV is asked for while tvIsRecording, it should stop the live tv, go to the menu, but not stop the recording.
			</dc:description>
			<dependency>
				<write> value('tvStatus') neq 'stopped' </write>
			</dependency>
		</command>
		<command id="pauseTV" type="uis:basicCommand" optional="true">
			<dc:description xml:lang="en">
				This command is part of the timeshifting functionality of the TV. This command pauses the TV broadcast to give the option of continuing from this point to the user.
				If successful, the variable "tvPaused" will be set to true.
			</dc:description>
			<dependency>
				<write> (value('tvStatus') eq 'playing' ) and (value('tvIsRecording') eq 'false')</write>
			</dependency>
		</command>
		<command id="resumeTV" type="uis:basicCommand" optional="true">
			<dc:description xml:lang="en">This command is part of the timeshifting functionality of the TV. This resume command  continues the TV broadcast from the point it was paused.</dc:description>
			<dependency>
				<write> value('tvStatus') eq 'paused' </write>
			</dependency>
		</command>
		<command id="resumeLiveTV" type="uis:basicCommand" optional="true">
			<dc:description xml:lang="en">This command is part of the timeshifting functionality of the TV. This resume command  continues the TV broadcast, going to liveTV broadcast instead of using the point it was paused.</dc:description>
			<dependency>
				<write> value('tvStatus') eq 'paused' </write>
			</dependency>
		</command>
		</set>
	<set id="tvRecordingControls">
		<variable id="tvIsRecording" type="xsd:boolean" optional="true">
			<dc:description xml:lang="en">This variable shows us if we are manually recording a show on live TV mode. Assumes that only one channel can be recorded at a time. </dc:description>			
			<dependency>
				<relevant>true()</relevant>
				<write>false()</write>
			</dependency>

		</variable>
		<command id="recordTV" type="uis:basicCommand" optional="true">			
			<dc:description xml:lang="en">This command allows the user to record the liveTV
				content she/he's watching. Record is available while TV is paused.</dc:description>
			<dependency>
				<write> (value('tvStatus') neq 'stopped') and (value('tvIsRecording') eq 'false')</write>
			</dependency>
		</command>
		<command id="stopRecordingTV" type="uis:basicCommand" optional="true">
			<dc:description xml:lang="en">This command allows the user to stop recording the liveTV
				content she/he's watching. </dc:description>
			<dependency>
				<write> value ('tvIsRecording') eq 'true'</write>
			</dependency>
		</command>
	</set>
	<xsd:schema>
		<xsd:simpleType name="powerModeType" id="powerModeTypeId">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="STANDBY"/>
				<xsd:enumeration value="ON"/>
				<xsd:enumeration value="OFF"/>				
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:simpleType name="switchToType" id="switchToTypeId">
			<xsd:restriction base="xsd:string">				
				<xsd:enumeration value="ON"/>
				<xsd:enumeration value="OFF"/>
				<xsd:enumeration value="STANDBY"/>
				<xsd:enumeration value="TOOGLE"/>				
			</xsd:restriction>
		</xsd:simpleType>		
		<xsd:simpleType name="statusType" id="statusTypeId">
			<xsd:annotation>
				<xsd:documentation/>
			</xsd:annotation>
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="stopped"/>
				<xsd:enumeration value="playing"/>
				<xsd:enumeration value="paused"/>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:simpleType name="volumeType" id="volumeTypeId">
			<xsd:annotation>
				<xsd:documentation/>
			</xsd:annotation>
			<xsd:restriction base="xsd:unsignedInt">
				<xsd:minInclusive value="0"/>
				<xsd:maxInclusive value="50"/>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:simpleType name="channelType" id="channelTypeId">
			<xsd:annotation>
				<xsd:documentation>Codes for channels - no whitespaces allowed as part of the codes.  Dynamic labels should be provided.</xsd:documentation>
			</xsd:annotation>
			<xsd:restriction base="uis:stringListItem">
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:simpleType name="channelListType" id="channelListTypeId">
			<xsd:annotation>
				<xsd:documentation>List of channel codes.</xsd:documentation>
			</xsd:annotation>
			<xsd:list itemType="channelType"/>
		</xsd:simpleType>
	</xsd:schema>
</uiSocket>
